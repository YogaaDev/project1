{"ast":null,"code":"var _jsxFileName = \"/Users/kevin/Applications/Projets/Okto/Web/src/components/pages/Home.tsx\",\n    _s = $RefreshSig$();\n\nimport { Row, Col } from \"antd\";\nimport { withTranslation } from \"react-i18next\";\nimport { ImgPers } from \"../../common/Img\";\nimport { Button } from \"@material-ui/core\";\nimport { Slide } from \"react-awesome-reveal\";\nimport { GenContainer, BlockContainer, Content, ContentWrapperSvg, ButtonContainer, ContentInfoMint } from \"./styles\";\nimport { ButtonPers } from \"../../common/Button\";\nimport { useEffect, useMemo, useState } from \"react\";\nimport styled from \"styled-components\";\nimport Countdown from \"react-countdown\";\nimport { CircularProgress, Snackbar } from \"@material-ui/core\";\nimport Alert from \"@material-ui/lab/Alert\";\nimport { LAMPORTS_PER_SOL } from \"@solana/web3.js\";\nimport { useAnchorWallet } from \"@solana/wallet-adapter-react\";\nimport { awaitTransactionSignatureConfirmation, getCandyMachineState, mintOneToken } from \"../../candy-machine\";\nimport whitelistAddress from './whitelist';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CounterText = styled.span``;\n_c = CounterText;\nconst MintContainer = styled.div`\nwidth: 100%;\ndisplay: flex;\njustify-content: center;\npadding: 2rem;\n`;\n_c2 = MintContainer;\nconst MintButton = styled(Button)`\nborder: 5px solid #fff;\nborder-radius: 0px;\n`;\n_c3 = MintButton;\n\nconst Home = props => {\n  _s();\n\n  const [balance, setBalance] = useState();\n  const [isSoldOut, setIsSoldOut] = useState(false); // true when items remaining is zero\n\n  const [isMinting, setIsMinting] = useState(false); // true when user got to press MINT\n\n  const [itemsAvailable, setItemsAvailable] = useState(0);\n  const [itemsRedeemed, setItemsRedeemed] = useState(0);\n  const [itemsRemaining, setItemsRemaining] = useState(0);\n  const [startDate, setStartDate] = useState(new Date(props.startDate * 1000));\n  const isLive = useMemo(() => startDate <= new Date(), [startDate]);\n  const [alertState, setAlertState] = useState({\n    open: false,\n    message: \"\",\n    severity: undefined\n  });\n  const wallet = useAnchorWallet();\n  const [candyMachine, setCandyMachine] = useState();\n\n  const refreshCandyMachineState = () => {\n    (async () => {\n      if (!wallet) return;\n      const {\n        candyMachine,\n        goLiveDate,\n        itemsAvailable,\n        itemsRemaining,\n        itemsRedeemed\n      } = await getCandyMachineState(wallet, props.candyMachineId, props.connection);\n      setItemsAvailable(itemsAvailable);\n      setItemsRemaining(itemsRemaining);\n      setItemsRedeemed(itemsRedeemed);\n      setIsSoldOut(itemsRemaining === 0);\n      setStartDate(goLiveDate);\n      setCandyMachine(candyMachine);\n    })();\n  };\n\n  const onMint = async () => {\n    try {\n      var _wallet$publicKey, _wallet$publicKey3;\n\n      setIsMinting(true); // Si on est dans la whitelist ou si la whitelist est passé\n\n      if (wallet && (candyMachine === null || candyMachine === void 0 ? void 0 : candyMachine.program) && (whitelistAddress.includes((_wallet$publicKey = wallet.publicKey) === null || _wallet$publicKey === void 0 ? void 0 : _wallet$publicKey.toBase58()) && itemsRedeemed < 1000 || itemsRedeemed >= 1000)) {\n        const mintTxId = await mintOneToken(candyMachine, props.config, wallet.publicKey, props.treasury);\n        const status = await awaitTransactionSignatureConfirmation(mintTxId, props.txTimeout, props.connection, \"singleGossip\", false);\n\n        if (!(status === null || status === void 0 ? void 0 : status.err)) {\n          setAlertState({\n            open: true,\n            message: \"Congratulations! Mint succeeded!\",\n            severity: \"success\"\n          });\n\n          if (wallet) {\n            var _wallet$publicKey2;\n\n            whitelistAddress.splice(whitelistAddress.indexOf((_wallet$publicKey2 = wallet.publicKey) === null || _wallet$publicKey2 === void 0 ? void 0 : _wallet$publicKey2.toBase58()), 1);\n          }\n        } else {\n          setAlertState({\n            open: true,\n            message: \"Mint failed! Please try again!\",\n            severity: \"error\"\n          });\n        }\n      } // Si on est pas dans la white list et qu'on l'a pas ecore passé\n      else if (wallet && (candyMachine === null || candyMachine === void 0 ? void 0 : candyMachine.program) && !whitelistAddress.includes((_wallet$publicKey3 = wallet.publicKey) === null || _wallet$publicKey3 === void 0 ? void 0 : _wallet$publicKey3.toBase58()) && itemsRedeemed < 1000) {\n          setAlertState({\n            open: true,\n            message: \"You are not in the whitelist, or you already mint an Okto!\",\n            severity: \"error\"\n          });\n        }\n    } catch (error) {\n      // TODO: blech:\n      let message = error.msg || \"Minting failed! Please try again!\";\n\n      if (!error.msg) {\n        if (error.message.indexOf(\"0x138\")) {} else if (error.message.indexOf(\"0x137\")) {\n          message = `SOLD OUT!`;\n        } else if (error.message.indexOf(\"0x135\")) {\n          message = `Insufficient funds to mint. Please fund your wallet.`;\n        }\n      } else {\n        if (error.code === 311) {\n          message = `SOLD OUT!`;\n          setIsSoldOut(true);\n        } else if (error.code === 312) {\n          message = `Minting period hasn't started yet.`;\n        }\n      }\n\n      setAlertState({\n        open: true,\n        message,\n        severity: \"error\"\n      });\n    } finally {\n      if (wallet) {\n        const balance = await props.connection.getBalance(wallet.publicKey);\n        setBalance(balance / LAMPORTS_PER_SOL);\n      }\n\n      setIsMinting(false);\n      refreshCandyMachineState();\n    }\n  };\n\n  useEffect(() => {\n    (async () => {\n      if (wallet) {\n        const balance = await props.connection.getBalance(wallet.publicKey);\n        setBalance(balance / LAMPORTS_PER_SOL);\n      }\n    })();\n  }, [wallet, props.connection]);\n  useEffect(refreshCandyMachineState, [wallet, props.candyMachineId, props.connection]);\n  return /*#__PURE__*/_jsxDEV(GenContainer, {\n    children: /*#__PURE__*/_jsxDEV(BlockContainer, {\n      children: [/*#__PURE__*/_jsxDEV(Row, {\n        justify: \"center\",\n        align: \"middle\",\n        children: [/*#__PURE__*/_jsxDEV(Col, {\n          lg: 13,\n          md: 13,\n          sm: 13,\n          xs: 22,\n          offset: 1,\n          children: /*#__PURE__*/_jsxDEV(Slide, {\n            direction: \"left\",\n            children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n              children: \" Say \\\"Hello\\\" to Okto.\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 215,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Content, {\n              children: \"4,389 Unique, Punchy, Cuty, Algorithmically generated Oktos. Stored with proof of ownership on the Solana blockchain.\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 217,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Row, {\n              align: \"middle\",\n              justify: \"center\",\n              children: /*#__PURE__*/_jsxDEV(MintContainer, {\n                children: isSoldOut ? /*#__PURE__*/_jsxDEV(ButtonContainer, {\n                  children: /*#__PURE__*/_jsxDEV(ButtonPers, {\n                    children: \"View on Secondary Market\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 223,\n                    columnNumber: 52\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 223,\n                  columnNumber: 35\n                }, this) : /*#__PURE__*/_jsxDEV(MintButton, {\n                  onClick: onMint,\n                  disabled: isSoldOut || isMinting || !isLive,\n                  variant: \"text\",\n                  children: isLive && wallet ? isMinting ? /*#__PURE__*/_jsxDEV(CircularProgress, {}, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 228,\n                    columnNumber: 29\n                  }, this) : /*#__PURE__*/_jsxDEV(ButtonContainer, {\n                    children: /*#__PURE__*/_jsxDEV(ButtonPers, {\n                      children: \"Mint for 2 SOL\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 229,\n                      columnNumber: 46\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 229,\n                    columnNumber: 29\n                  }, this) : startDate.getTime() / 1000 > 86400 ? /*#__PURE__*/_jsxDEV(ContentInfoMint, {\n                    children: /*#__PURE__*/_jsxDEV(\"b\", {\n                      children: [\"Live at : \", startDate.toUTCString()]\n                    }, void 0, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 232,\n                      columnNumber: 45\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 232,\n                    columnNumber: 28\n                  }, this) : /*#__PURE__*/_jsxDEV(ButtonContainer, {\n                    children: /*#__PURE__*/_jsxDEV(ButtonPers, {\n                      children: /*#__PURE__*/_jsxDEV(Countdown, {\n                        date: startDate,\n                        onComplete: () => refreshCandyMachineState(),\n                        renderer: renderCounter\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 233,\n                        columnNumber: 57\n                      }, this)\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 233,\n                      columnNumber: 45\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 233,\n                    columnNumber: 28\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 224,\n                  columnNumber: 21\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 222,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 221,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Content, {\n              children: wallet && !isSoldOut && isLive && /*#__PURE__*/_jsxDEV(ContentInfoMint, {\n                children: [\"Available: \", itemsRemaining, \" / \", itemsAvailable, \" \\xA0\\xA0-\\xA0\\xA0 Balance: \", (balance || 0).toLocaleString(), \" SOL\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 244,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 242,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 213,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 211,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Col, {\n          lg: 9,\n          md: 9,\n          sm: 9,\n          xs: 22,\n          offset: 1,\n          children: /*#__PURE__*/_jsxDEV(ContentWrapperSvg, {\n            children: /*#__PURE__*/_jsxDEV(ImgPers, {\n              src: \"Okto_gif.gif\",\n              width: \"100%\",\n              height: \"100%\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 255,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 254,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 253,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 209,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Snackbar, {\n        open: alertState.open,\n        autoHideDuration: 6000,\n        onClose: () => setAlertState({ ...alertState,\n          open: false\n        }),\n        children: /*#__PURE__*/_jsxDEV(Alert, {\n          onClose: () => setAlertState({ ...alertState,\n            open: false\n          }),\n          severity: alertState.severity,\n          children: alertState.message\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 262,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 261,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 207,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 206,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Home, \"+uJZZhQD2KakNDuaWOC+p8ToE5o=\", false, function () {\n  return [useAnchorWallet];\n});\n\n_c4 = Home;\n\nconst renderCounter = ({\n  days,\n  hours,\n  minutes,\n  seconds,\n  completed\n}) => {\n  return /*#__PURE__*/_jsxDEV(CounterText, {\n    children: [hours + (days || 0) * 24, \" hours, \", minutes, \" minutes, \", seconds, \" seconds\"]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 284,\n    columnNumber: 5\n  }, this);\n};\n\nexport default withTranslation()(Home);\n\nvar _c, _c2, _c3, _c4;\n\n$RefreshReg$(_c, \"CounterText\");\n$RefreshReg$(_c2, \"MintContainer\");\n$RefreshReg$(_c3, \"MintButton\");\n$RefreshReg$(_c4, \"Home\");","map":{"version":3,"sources":["/Users/kevin/Applications/Projets/Okto/Web/src/components/pages/Home.tsx"],"names":["Row","Col","withTranslation","ImgPers","Button","Slide","GenContainer","BlockContainer","Content","ContentWrapperSvg","ButtonContainer","ContentInfoMint","ButtonPers","useEffect","useMemo","useState","styled","Countdown","CircularProgress","Snackbar","Alert","LAMPORTS_PER_SOL","useAnchorWallet","awaitTransactionSignatureConfirmation","getCandyMachineState","mintOneToken","whitelistAddress","CounterText","span","MintContainer","div","MintButton","Home","props","balance","setBalance","isSoldOut","setIsSoldOut","isMinting","setIsMinting","itemsAvailable","setItemsAvailable","itemsRedeemed","setItemsRedeemed","itemsRemaining","setItemsRemaining","startDate","setStartDate","Date","isLive","alertState","setAlertState","open","message","severity","undefined","wallet","candyMachine","setCandyMachine","refreshCandyMachineState","goLiveDate","candyMachineId","connection","onMint","program","includes","publicKey","toBase58","mintTxId","config","treasury","status","txTimeout","err","splice","indexOf","error","msg","code","getBalance","getTime","toUTCString","renderCounter","toLocaleString","days","hours","minutes","seconds","completed"],"mappings":"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","sourcesContent":["import { Row, Col } from \"antd\";\r\nimport { withTranslation } from \"react-i18next\";\r\nimport { ImgPers } from \"../../common/Img\";\r\nimport { Button } from \"@material-ui/core\";\r\nimport { Slide } from \"react-awesome-reveal\";\r\nimport {\r\n  GenContainer,\r\n  BlockContainer,\r\n  Content,\r\n  ContentWrapperSvg,\r\n  ButtonContainer,\r\n  ContentInfoMint,\r\n} from \"./styles\";\r\nimport { ButtonPers } from \"../../common/Button\";\r\n\r\nimport { useEffect, useMemo, useState } from \"react\";\r\nimport styled from \"styled-components\";\r\nimport Countdown from \"react-countdown\";\r\nimport { CircularProgress, Snackbar } from \"@material-ui/core\";\r\nimport Alert from \"@material-ui/lab/Alert\";\r\nimport * as anchor from \"@project-serum/anchor\";\r\nimport { LAMPORTS_PER_SOL } from \"@solana/web3.js\";\r\nimport { AnchorWallet, useAnchorWallet } from \"@solana/wallet-adapter-react\";\r\n\r\nimport {\r\n  CandyMachine,\r\n  awaitTransactionSignatureConfirmation,\r\n  getCandyMachineState,\r\n  mintOneToken,\r\n} from \"../../candy-machine\";\r\n\r\nimport whitelistAddress from './whitelist';\r\n\r\n\r\nconst CounterText = styled.span``;\r\nconst MintContainer = styled.div`\r\nwidth: 100%;\r\ndisplay: flex;\r\njustify-content: center;\r\npadding: 2rem;\r\n`;\r\nconst MintButton = styled(Button)`\r\nborder: 5px solid #fff;\r\nborder-radius: 0px;\r\n`;\r\n\r\nexport interface HomeProps {\r\n  candyMachineId: anchor.web3.PublicKey;\r\n  config: anchor.web3.PublicKey;\r\n  connection: anchor.web3.Connection;\r\n  startDate: number;\r\n  treasury: anchor.web3.PublicKey;\r\n  txTimeout: number;\r\n}\r\n\r\nconst Home = (props: HomeProps) => {\r\n\r\n  const [balance, setBalance] = useState<number>();\r\n  const [isSoldOut, setIsSoldOut] = useState(false); // true when items remaining is zero\r\n  const [isMinting, setIsMinting] = useState(false); // true when user got to press MINT\r\n  const [itemsAvailable, setItemsAvailable] = useState(0);\r\n  const [itemsRedeemed, setItemsRedeemed] = useState(0);\r\n  const [itemsRemaining, setItemsRemaining] = useState(0);\r\n  const [startDate, setStartDate] = useState(new Date(props.startDate * 1000));\r\n  const isLive = useMemo(() => startDate <= new Date(), [startDate]);\r\n\r\n\r\n  const [alertState, setAlertState] = useState<AlertState>({\r\n    open: false,\r\n    message: \"\",\r\n    severity: undefined,\r\n  });\r\n\r\n  interface IAnchorWallet extends AnchorWallet {\r\n    connected?: boolean;\r\n  }\r\n  const wallet: IAnchorWallet | undefined = useAnchorWallet();\r\n\r\n  const [candyMachine, setCandyMachine] = useState<CandyMachine>();\r\n\r\n  const refreshCandyMachineState = () => {\r\n    (async () => {\r\n      if (!wallet) return;\r\n\r\n      const {\r\n        candyMachine,\r\n        goLiveDate,\r\n        itemsAvailable,\r\n        itemsRemaining,\r\n        itemsRedeemed,\r\n      } = await getCandyMachineState(\r\n        wallet as anchor.Wallet,\r\n        props.candyMachineId,\r\n        props.connection\r\n      );\r\n\r\n      setItemsAvailable(itemsAvailable);\r\n      setItemsRemaining(itemsRemaining);\r\n      setItemsRedeemed(itemsRedeemed);\r\n\r\n      setIsSoldOut(itemsRemaining === 0);\r\n      setStartDate(goLiveDate);\r\n      setCandyMachine(candyMachine);\r\n    })();\r\n  };\r\n\r\n  const onMint = async () => {\r\n    try {\r\n      setIsMinting(true);\r\n      // Si on est dans la whitelist ou si la whitelist est passé\r\n      if (wallet && candyMachine?.program \r\n            && ( (whitelistAddress.includes(wallet.publicKey?.toBase58()) && (itemsRedeemed < 1000)) || (itemsRedeemed >= 1000) ) ) {\r\n        const mintTxId = await mintOneToken(\r\n          candyMachine,\r\n          props.config,\r\n          wallet.publicKey,\r\n          props.treasury\r\n        );\r\n\r\n        const status = await awaitTransactionSignatureConfirmation(\r\n          mintTxId,\r\n          props.txTimeout,\r\n          props.connection,\r\n          \"singleGossip\",\r\n          false\r\n        );\r\n\r\n        if (!status?.err) {\r\n          setAlertState({\r\n            open: true,\r\n            message: \"Congratulations! Mint succeeded!\",\r\n            severity: \"success\",\r\n          });\r\n          if (wallet) {\r\n            whitelistAddress.splice( whitelistAddress.indexOf(wallet.publicKey?.toBase58()), 1);\r\n          }\r\n        } else {\r\n          setAlertState({\r\n            open: true,\r\n            message: \"Mint failed! Please try again!\",\r\n            severity: \"error\",\r\n          });\r\n        }\r\n      }\r\n      // Si on est pas dans la white list et qu'on l'a pas ecore passé\r\n      else if (wallet && candyMachine?.program \r\n            && ( (!whitelistAddress.includes(wallet.publicKey?.toBase58()) && (itemsRedeemed < 1000)) ) )\r\n      {\r\n        setAlertState({\r\n          open: true,\r\n          message: \"You are not in the whitelist, or you already mint an Okto!\",\r\n          severity: \"error\",\r\n        }); \r\n      }\r\n    } catch (error: any) {\r\n      // TODO: blech:\r\n      let message = error.msg || \"Minting failed! Please try again!\";\r\n      if (!error.msg) {\r\n        if (error.message.indexOf(\"0x138\")) {\r\n        } else if (error.message.indexOf(\"0x137\")) {\r\n          message = `SOLD OUT!`;\r\n        } else if (error.message.indexOf(\"0x135\")) {\r\n          message = `Insufficient funds to mint. Please fund your wallet.`;\r\n        }\r\n      } else {\r\n        if (error.code === 311) {\r\n          message = `SOLD OUT!`;\r\n          setIsSoldOut(true);\r\n        } else if (error.code === 312) {\r\n          message = `Minting period hasn't started yet.`;\r\n        }\r\n      }\r\n\r\n      setAlertState({\r\n        open: true,\r\n        message,\r\n        severity: \"error\",\r\n      });\r\n    } finally {\r\n      if (wallet) {\r\n        const balance = await props.connection.getBalance(wallet.publicKey);\r\n        setBalance(balance / LAMPORTS_PER_SOL);\r\n      }\r\n      setIsMinting(false);\r\n      refreshCandyMachineState();\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    (async () => {\r\n      if (wallet) {\r\n        const balance = await props.connection.getBalance(wallet.publicKey);\r\n        setBalance(balance / LAMPORTS_PER_SOL);\r\n      }\r\n    })();\r\n  }, [wallet, props.connection]);\r\n\r\n  useEffect(refreshCandyMachineState, [\r\n    wallet,\r\n    props.candyMachineId,\r\n    props.connection,\r\n  ]);\r\n\r\n  return (\r\n    \r\n    <GenContainer>\r\n      <BlockContainer >\r\n\r\n        <Row justify=\"center\" align=\"middle\">\r\n    \r\n          <Col lg={13} md={13} sm={13} xs={22} offset={1}>\r\n\r\n            <Slide direction=\"left\">\r\n\r\n              <h2> Say \"Hello\" to Okto.</h2>\r\n              \r\n              <Content >\r\n                 4,389 Unique, Punchy, Cuty, Algorithmically generated Oktos. Stored with proof of ownership on the Solana blockchain. \r\n              </Content>\r\n\r\n              <Row align=\"middle\" justify=\"center\" >\r\n                <MintContainer>\r\n                  { isSoldOut ? ( <ButtonContainer><ButtonPers>View on Secondary Market</ButtonPers></ButtonContainer> ) : (\r\n                    <MintButton onClick={onMint} disabled={isSoldOut || isMinting || !isLive} variant=\"text\">\r\n                      { (isLive && wallet) ? \r\n                        ( \r\n                          isMinting ? \r\n                          ( <CircularProgress /> ) :\r\n                          ( <ButtonContainer><ButtonPers>Mint for 2 SOL</ButtonPers></ButtonContainer> )\r\n                        ) : (  \r\n                          ((startDate.getTime() / 1000) > 86400) ? \r\n                          (<ContentInfoMint><b>Live at : {startDate.toUTCString()}</b></ContentInfoMint> ) : \r\n                          (<ButtonContainer><ButtonPers><Countdown date={startDate} onComplete={() => refreshCandyMachineState()} renderer={renderCounter} /></ButtonPers></ButtonContainer>)\r\n                        )\r\n                      }\r\n                    </MintButton>\r\n                    )\r\n                  }\r\n                </MintContainer>  \r\n              </Row>\r\n              \r\n              <Content>\r\n                {wallet && !isSoldOut && isLive &&\r\n                  <ContentInfoMint>\r\n                    Available: {itemsRemaining} / {itemsAvailable} &nbsp;&nbsp;-&nbsp;&nbsp; Balance: {(balance || 0).toLocaleString()} SOL\r\n                  </ContentInfoMint>\r\n                }\r\n              </Content>\r\n      \r\n            </Slide> \r\n          </Col>\r\n\r\n          <Col lg={9} md={9} sm={9} xs={22} offset={1}> \r\n              <ContentWrapperSvg>\r\n                <ImgPers src=\"Okto_gif.gif\" width=\"100%\" height=\"100%\" />\r\n              </ContentWrapperSvg>\r\n          </Col>\r\n\r\n        </Row>\r\n\r\n        <Snackbar open={alertState.open} autoHideDuration={6000} onClose={() => setAlertState({ ...alertState, open: false })} >\r\n          <Alert\r\n            onClose={() => setAlertState({ ...alertState, open: false })}\r\n            severity={alertState.severity}\r\n          >\r\n            {alertState.message}\r\n          </Alert>\r\n        </Snackbar>\r\n\r\n      </BlockContainer>\r\n    </GenContainer>\r\n  );\r\n};\r\n\r\n\r\ninterface AlertState {\r\n  open: boolean;\r\n  message: string;\r\n  severity: \"success\" | \"info\" | \"warning\" | \"error\" | undefined;\r\n}\r\n\r\nconst renderCounter = ({ days, hours, minutes, seconds, completed }: any) => {\r\n  return (\r\n    <CounterText>\r\n      {hours + (days || 0) * 24} hours, {minutes} minutes, {seconds} seconds\r\n    </CounterText>\r\n  );\r\n};\r\n\r\nexport default withTranslation()(Home);\r\n"]},"metadata":{},"sourceType":"module"}